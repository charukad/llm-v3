version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/math_llm_system
      - RABBITMQ_HOST=rabbitmq
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - LOG_LEVEL=INFO
      - MODEL_PATH=/app/models/mistral-7b-v0.1-4bit
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - mongodb
      - rabbitmq
      - redis
      - qdrant
    networks:
      - math_llm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend web service
  web:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.web
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - math_llm_network
    restart: unless-stopped

  # MongoDB database
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - math_llm_network
    restart: unless-stopped
    command: ["--wiredTigerCacheSizeGB", "1"]
    environment:
      - MONGO_INITDB_DATABASE=math_llm_system

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - math_llm_network
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - math_llm_network
    restart: unless-stopped
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"   # API port
      - "6334:6334"   # Web UI
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - math_llm_network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - math_llm_network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - ./deployments/docker/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - math_llm_network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

networks:
  math_llm_network:
    driver: bridge

volumes:
  mongodb_data:
  rabbitmq_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:
